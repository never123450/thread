各层的主要功能
厂物理层:使原始的数据比特流能在物理介质上传输。
数据链路层:通过校验、确认和反馈重发等手段，形成稳定的数据链路。(01010101)。 .
网络层:进行路由选择和流量控制。(IP协议)
传输层:提供可靠的端口到端口的数据传输服务(TCP/UDP协议)
厂会话层:负责建立、管理和终止进程之间的会话和数据交换。
E 7表示层: 负责数据格式转换、 数据加密与解密、压缩与解压缩等。
应用层:为用户的应用进程提供网络服务。


第一-部分:状态行。HTTP版本、 状态码、状态消息。
第二部分:响应报头部，紧接着请求行(即第一-行)之
后的部分，用来说明服务器要使用的附加信息
第三部分:空行，头部后面的空行是必须的
头部和数据主体之间必须有换行
第四部分:响应正文。可以添加任意的数据。
这个例子的响应正文为“Hello World”。


Http协议-响应状态码
1xx (临时响应)
表示临时响应并需要请求者继续执行操作的状态代码
2xx (成功)
表示成功处理了请求的状态代码。
3xx (重定向)
表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。
4xx (请求错误)
这些状态代码表示请求可能出错，妨碍了服务器的处理。
5xx (服务器错误)
这些状态代码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。


BIO-阻塞I0的含义
阻塞(blocking) I0: 资源不可用时，I0请求一直阻塞，直到反馈结果(有数据或超时)。
非阻塞(non-blocking) I0: 资源不可用时，I0请求离开返回，返回数据标识资源不可用。
同步(synchronous) I0: 应用阻塞在发送或接收数据的状态，直到数据成功传输或返回失败。
异步(asynchronous) I0: 应用发送或接收数据后立刻返回，实际处理是异步执行的。
***阻塞和非阻塞是获取资源的方式，同步/异步是程序如何处理资源的逻辑设计。***
代码中使用的API: ServerSocket#accept、 InputStream#read 都是阻塞的APl。操作系统底
层API中，默认Socket操作都是Blocking型，send/recv等 接口都是阻塞的。
带来的问题:阻塞导致在处理网络I/O时，- -个线程只能处理一个网络连接。


Semaphore
又称“信号量”，控制多个线程争抢许可。
acquire:获取一个许可，如果没有就等待，
release:释放一个许可。
availablePermits:方法得到可用的许可数目
典型场景:
1、代码并发处理限流;，SemaphoreDemo.java
自己实现信号量：NeteaseSemaphore.java



CountDownLatch
java1.5被引入的- -个工具类，常被称为:倒计数器。
创建对象时，传入指定数值作为线程参与的数量;
await:方法等待计数器值变为0，在这之前，线程进入等待状态;
countdown:计数器数值减一，直到为0;
经常用于等待其他线程执行到某一节点， 再继续执行当前线程代码
使用场景示例:
1、 统计线程执行的情况;
2、 压力测试中，使用countDownL atch实现最大程度的并发处理;
3、 多个线程之间，相互通信，比如线程异步调用完接口，结果通知;
类似田径运动，等待运动员就绪

CyclicBarrier
也是1.5加入的，又称为“线程栅栏”。
创建对象时，指定栅栏线程数量。
await:等指定数量的线程都处于等待状态时，继续执行后续代码。
barrierAction:线程数量到了指定量之后，自动触发执行指定任务。
吕面对面扫码拼单
和CounDownLatch重要区别在于，CyclicBarrier对象可多次触发执行;
拼多多 还差5人，人满才算拼单成功


Buffer工作原理
Buffer三个重要属性:
capacity容量:作为一一个内存块，Buffer具有- -定的固定大小，也称为“容量”。
position位置:写入模式时代表写数据的位置。读取模式时代表读取数据的位置。
limit限制:写入模式，限制等于buffer的容量。读取模式下，limit等 于写入的数据量。



ByteBuffer内存类型
ByteBuffer为性能关键型代码提供了直接内存(direct堆外)和非直接内存(heap堆)两种实现。
堆外内存获取的方式: ByteBuffer directByteBuffer = ByteBuffer.allocateDirect(noBytes);
好处:
1、进行网络I0或者 文件I0时比heapBuffer少- -次拷贝。(ile/socket ---- OS memory ---- jvm heap)
GC会移动对象内存，在写file或socket的过程中，JVM的实现中， 会先把数据复制到堆外，再进行写入。
2、GC范围之外， 降低GC压力，但实现了自动管理。DirectByteBuffer中有 一-个Cleaner对象
(PhantomReference)，Cleaner被GC前 会执行clean方法，触发DirectByteBuffer中定义 的Deallocator


建议:
1、 性能确实可观的时候才去使用;分配给大型、长寿命;
(网络传输、文件读写场景)
2、通过虚拟机参数MaxDirectMemorySize限制大小，防止耗尽整个机器的内存;


SocketChannel
SocketChannel用于建立TCP网络连接，类似java.net.Socket。 有两种创建socketChannel形式:
1.客户 端主动发起和服务器的连接。
2.服务 端获取的新连接。
//客户端主动发起连接的方式
SocketChannel socketChannel = SocketChannel.open () ;
socketChannel .configureBlocking( false );//设置为非阻塞模式
socketChannel.connect (new InetSocketAddress (“http://163.com” ，80) ) ;
channel.write(byteBuffer);// 发送请求数据-向通道写 入数据
int bytesRead =socketChannel.read ( byteBuffer) ;//读取服务端返回-读取缓冲区 的数据
socketChannel.close (); //关闭连接

write写: write()在尚未写 入任何内容时就可能返回了。需要在循环中调用write()。
read读: read()方 法可能直接返回而根本不读取任何数据，根据返回的int值判断读取了多少字节。


ServerSocketChannel
ServerSocketChannel可以监听新建的TCP连接通道，类似ServerSocket。
//创建网络服务端
ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
serverSocketChannel.configureBlocking(false); //设置为非阻塞模式
serverSocketChannel.socket().bind(new InetSocketAddress(8080)); //绑定端口
while(true){
SocketChannel socketChannel= serverSocketChannel.accept(); //获取新tcp连接通道
if(socketChannel !:= nul){
// tcp请求读取/响应
serverSocketChannelaccept():如果该通道处于非阻塞模式，那么如果没有挂起的连接，该方法将立即返
回null。必须检查返回的SocketChannel是否为null。
这种低效的循环检查，会是NIO服务端的正确开发方式嘛?

Selector选择器
Selector是一个Java NIO组件，可以检查一个或多个NIO通道，并确定哪些通道已准备好进行读取或
写入。实现单个线程可以管理多个通道，从而管理多个网络连接。

-个线程使用Selector监听多个channel的不同事件:
四个事件分别对应SelectionKey四个常量。
1. Connect 连接(SelectionKey.OP_ _CONNECT)
2. Accept 准备就绪(OP_ _ACCEPT)
3. Read 读取(OP_ READ)
4. Write 写入(OP_ _WRITE)

            Thread
           Selector
Channel     Channel      Channel


Selector选择器
实现一个线程处理多个通道的核心概念理解:事件驱动机制。
非阻塞的网络通道下，开发者通过Selector注册对于通道感兴趣的事件类型，线程通过监听事件来
触发相应的代码执行。(拓展: 更底层是操作系统的多路复用机制)
Selector selector = Selector.open();
channel.configureBlocking(false);
SelectionKey key = channel.register(selector, SelectionKey.OP READ); //注册感兴趣的事件
while(true) {//由accept轮询，变成了事件通知的方式。
int readyChannels = selector.select(); // select收到新的事件，方法才会返回
if(readyChannels == 0) continue;
Set<SelectionKey> selectedKeys = selector.selectedKeys();
Iterator<SelectionKey> keylterator = selectedKeys.iterator();
while(keylterator.hasNext()) {
SelectionKey key = keylterator.next();
//判断不同的事件类型，执行对应的逻辑处理
// key.isAcceptable() / key.isConnectable() / key.isReadable() / key.isWritable(}
keylterator.remove();}



NIO对比BI0

BIO线程模型
阻塞lO，线程等待时间长
线程-2 read..write
●一个线程负责一个连接处理
线程多且利用率低

NIO线程模型
单个线程
非阻塞I0，线程利用率更高
●一个线程处理多个连接事件
事件通知机制
性能更强大

如果你的程序需要支撑大量的连接，使用NIO是最好的方式。
Tomcat8中，已经完全去除BIO相关的网络处理代码，默认采用NIO进行网络处理。


Netty简介
Netty是一个高性能、高可扩展性的异步事件驱动的网络应用程序框架，它极大地简
化了TCP和UDP客户端和服务器开发等网络编程。
Netty重要的四个内容:
1) Reactor线程模型: -种高性能的多线程程序设计思路
2) Netty中 自己定义的Channel概念:增强版的通道概念
3) ChannelPipeline职责链设计模式:事件处理机制
4) 内存管理:增强的ByteBuf缓冲区


Netty整体结构图
1、 支持Socket等多种传输方式;Legacy Text . Binary Protocols In-VM Pipe
with Unit Testability
2、提供 了多种协议的编解码实现;Extensible Event Model
3、核心设计包含 事件处理模型、APIUniversal Communication API的使用、ByteBuffer的增 强
Zero-Copy-Capable Rich Byte Buffer

Netty线程模型
为了让NIO处理更好的利用多线程特性，Netty实现了Reactor线程模型。
Reactor模型中有四个核心概念:
1) Resources 资源(请求/任务)
2) Synchronous Event Demultiplexer同步事件复用器
3) Dispatcher 分配器
4) Request Handler请求处理器

